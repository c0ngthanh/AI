import numpy as np
from tent.bfs import bfs
from tent.sa import *
from tent_game.game import *
puzzle =  """
            001000001000000010000010001000
            100000000111000001010000100010
            000001000100010000010010000010
            000100000000001100000000000000
            100010100000001001100011000100
            010000110100100010000010001000
            000010000011000000000100100001
            000000000001010000000100000001
            001010000000000011010000001000
            000000100110000000010100000001
            100000001010001000000000100100
            000010001000100000000000000001
            000000100100001010001001010000
            010000000000000000010000001010
            100100100001010001100000000000
            001001000100000000000100001001
            100010001000000000000000010000
            000000010101000010100100100000
            000010000000000000001000000100
            100100000110000001001100000100
            100010001010011110000000000010
            001000100010000000001000000001
            000000000100000000000001000100
            010000001000000101100100000001
            001000000001000000000000100010
            000001001011100010101011000001
            001001000000000001000000000000
            000000010010010000010000000100
            000010000110001000000011110001
            100100010000000100001010000010
        """
row_clue =  """
                8.6.4.9.4.5.8.4.8.3.9.0.10.3.8.3.9.3.8.5.6.7.4.8.4.8.5.7.2.12
            """
col_clue =  """
                7.6.4.7.4.8.4.9.2.13.2.9.3.6.6.7.4.8.3.10.3.11.3.7.6.1.9.4.4.10  
            """

def puzzle_to_np_array(board, row, col):
    puzzle   = np.array([[int(i) for i in line] for line in board.split()])
    row_clue = [int (i) for i in row.split('.')]
    col_clue = [int (i) for i in col.split('.')]
    size = len(col_clue)
    return puzzle, row_clue, col_clue, size
x, y ,z, n = puzzle_to_np_array(puzzle, row_clue, col_clue)
stack =  [] 
statelist = []
bfs(x, y, z, n, stack,statelist)
game = Game(x)
game.run(statelist)
# print(x)

# a = sa(x, y, z)
# a.run()

